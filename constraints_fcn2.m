function [ c, ceq, dc, dceq, sigma ] = constraints_fcn2( x, W, AT, tail_part,t,p,ind_borde_fuite, U_15, dR_drho, K_15, free_dofs, U0, sigmalim, nt,lambda0, mu0, a1, a2, a3, b1, b2, b3, ddl )%This function returns the value of the constraints used in the MMA%algorithm or in the fmincon (for the minimization problem).%The first constraint is the volume fraction, which depends just on the%densities rho.rho = W*x;              % filtering% The second constraint is the displacement of the trailing edge, which% should be greater (in module) than a certain U0: since U0<0, we will have%       U <= U0        ------>       1 - U/U0 <= 0[ GKS, dGKS_dUf, dGKS_drho, sigma ] = GKS_fcn2( U_15, ddl, free_dofs, lambda0, mu0, a1, a2, a3, b1, b2, b3, AT, rho, sigmalim, nt );c(1) = 2*GKS;lambda = -dGKS_dUf*(K_15(free_dofs,free_dofs)\eye(length(free_dofs)));dc(:,1) = 2*(dGKS_drho + (lambda*dR_drho).');c(2) = (1-U_15(2*ind_borde_fuite)/U0);% We use the adjoint sensitivity method adopted in Bhattacharyya's articledUe_dUf = sparse(1,2*ind_borde_fuite,-1/U0,1,length(U_15));dUe_dUf = dUe_dUf(free_dofs);lambda = -dUe_dUf*(K_15(free_dofs,free_dofs)\eye(length(free_dofs)));dc(:,2) = (lambda*dR_drho).';dc = W*dc;        % filtering of derivatives to bring them back to be dc/dxceq = [];dceq = [];end